"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[2488],{3905:function(e,t,a){a.d(t,{Zo:function(){return c},kt:function(){return g}});var n=a(7294);function r(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function i(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function s(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?i(Object(a),!0).forEach((function(t){r(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):i(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function o(e,t){if(null==e)return{};var a,n,r=function(e,t){if(null==e)return{};var a,n,r={},i=Object.keys(e);for(n=0;n<i.length;n++)a=i[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)a=i[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var l=n.createContext({}),p=function(e){var t=n.useContext(l),a=t;return e&&(a="function"==typeof e?e(t):s(s({},t),e)),a},c=function(e){var t=p(e.components);return n.createElement(l.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},d=n.forwardRef((function(e,t){var a=e.components,r=e.mdxType,i=e.originalType,l=e.parentName,c=o(e,["components","mdxType","originalType","parentName"]),d=p(a),g=r,m=d["".concat(l,".").concat(g)]||d[g]||u[g]||i;return a?n.createElement(m,s(s({ref:t},c),{},{components:a})):n.createElement(m,s({ref:t},c))}));function g(e,t){var a=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=a.length,s=new Array(i);s[0]=d;var o={};for(var l in t)hasOwnProperty.call(t,l)&&(o[l]=t[l]);o.originalType=e,o.mdxType="string"==typeof e?e:r,s[1]=o;for(var p=2;p<i;p++)s[p]=a[p];return n.createElement.apply(null,s)}return n.createElement.apply(null,a)}d.displayName="MDXCreateElement"},761:function(e,t,a){a.r(t),a.d(t,{assets:function(){return c},contentTitle:function(){return l},default:function(){return g},frontMatter:function(){return o},metadata:function(){return p},toc:function(){return u}});var n=a(7462),r=a(3366),i=(a(7294),a(3905)),s=["components"],o={},l="Strategies",p={unversionedId:"tutorials/testing/fuzzing/strategies",id:"tutorials/testing/fuzzing/strategies",title:"Strategies",description:"Often in code we operate on some assumptions about the possible values of variables.",source:"@site/docs/tutorials/07-testing/03-fuzzing/strategies.md",sourceDirName:"tutorials/07-testing/03-fuzzing",slug:"/tutorials/testing/fuzzing/strategies",permalink:"/protostar/docs/tutorials/testing/fuzzing/strategies",editUrl:"https://github.com/software-mansion/protostar/tree/master/website/docs/tutorials/07-testing/03-fuzzing/strategies.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorials",previous:{title:"Reproducing failures",permalink:"/protostar/docs/tutorials/testing/fuzzing/reproducing-failures"},next:{title:"Formatting",permalink:"/protostar/docs/tutorials/formatting"}},c={},u=[{value:"Core strategies",id:"core-strategies",level:2},{value:"<code>strategy.felts</code>",id:"strategyfelts",level:3},{value:"<code>strategy.integers</code>",id:"strategyintegers",level:3},{value:"<code>strategy.short_strings</code>",id:"strategyshort_strings",level:3},{value:"Adapting strategies",id:"adapting-strategies",level:2},{value:"Mapping",id:"mapping",level:3},{value:"Filtering",id:"filtering",level:3},{value:"Combining",id:"combining",level:3}],d={toc:u};function g(e){var t=e.components,a=(0,r.Z)(e,s);return(0,i.kt)("wrapper",(0,n.Z)({},d,a,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"strategies"},"Strategies"),(0,i.kt)("p",null,"Often in code we operate on some assumptions about the possible values of variables.\nFor example we can perform greater than zero validation early in the code, and we can assume that variables are greater than zero in the subsequent code.\nFuzzer allows to provide such assumptions to avoid testing against values which are not covered by the code. "),(0,i.kt)("p",null,"Cheatcode ",(0,i.kt)("a",{parentName:"p",href:"/protostar/docs/tutorials/testing/cheatcodes/given"},(0,i.kt)("inlineCode",{parentName:"a"},"given")),",\ninstructs fuzzer how to constraint set of values code is tested against.\nSuch constraints are provided declaratively, by assigning ",(0,i.kt)("em",{parentName:"p"},"strategies")," to the input parameters as on the example below."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cairo",metastring:'title="Example"',title:'"Example"'},"@external\nfunc setup_integers() {\n    %{\n        given(\n            a = strategy.integers(10, 20),\n            b = strategy.integers(30, 40),\n        )\n    %}\n    return ();\n}\n\n@external\nfunc test_integers{syscall_ptr : felt*, range_check_ptr}(a : felt, b : felt) {\n    assert_le(a, b);\n    return ();\n}\n")),(0,i.kt)("div",{className:"admonition admonition-note alert alert--secondary"},(0,i.kt)("div",{parentName:"div",className:"admonition-heading"},(0,i.kt)("h5",{parentName:"div"},(0,i.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,i.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,i.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"}))),"note")),(0,i.kt)("div",{parentName:"div",className:"admonition-content"},(0,i.kt)("p",{parentName:"div"},"By default, Protostar applies the ",(0,i.kt)("a",{parentName:"p",href:"#strategyfelts"},(0,i.kt)("inlineCode",{parentName:"a"},"strategy.felts()"))," strategy to all felt\nparameters."))),(0,i.kt)("p",null,"This document is a guide to what strategies are available for generating examples and how to build\nthem."),(0,i.kt)("h2",{id:"core-strategies"},"Core strategies"),(0,i.kt)("p",null,"All core strategies are contained in the ",(0,i.kt)("a",{parentName:"p",href:"/protostar/docs/tutorials/testing/cheatcodes/strategy"},(0,i.kt)("inlineCode",{parentName:"a"},"strategy")),"\ncheatcode-namespace."),(0,i.kt)("h3",{id:"strategyfelts"},(0,i.kt)("inlineCode",{parentName:"h3"},"strategy.felts")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},"def felts(*, rc_bound: bool = False) -> Strategy: ...\n")),(0,i.kt)("p",null,"By default, explores all possible felt values."),(0,i.kt)("p",null,"If keyword argument ",(0,i.kt)("inlineCode",{parentName:"p"},"rc_bound")," is ",(0,i.kt)("inlineCode",{parentName:"p"},"True"),", explores felts which can be passed to the ",(0,i.kt)("inlineCode",{parentName:"p"},"range_check"),"\nbuiltin.\nThis narrows the range of explored values according to the parameters of Cairo runtime.\nUse this functionality, if fuzzed values will be passed to any of the ",(0,i.kt)("inlineCode",{parentName:"p"},"assert_*")," functions from\n",(0,i.kt)("inlineCode",{parentName:"p"},"starkware.cairo.common.math")," module."),(0,i.kt)("h3",{id:"strategyintegers"},(0,i.kt)("inlineCode",{parentName:"h3"},"strategy.integers")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},"def integers(\n    min_value: Optional[int] = None,\n    max_value: Optional[int] = None,\n) -> Strategy: ...\n")),(0,i.kt)("p",null,"Generates integer values, possibly bounded by provided range."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python",metastring:'title="Examples"',title:'"Examples"'},"strategy.integers(0, 100)\nstrategy.integers(max_value=3000)\nstrategy.integers(11)\n")),(0,i.kt)("p",null,"Fuzzer picks integers from provided range and then converts them to felts.\nIf ",(0,i.kt)("inlineCode",{parentName:"p"},"min_value")," is not ",(0,i.kt)("inlineCode",{parentName:"p"},"None")," then all values will be greater than or equal to ",(0,i.kt)("inlineCode",{parentName:"p"},"min_value"),",\nand if ",(0,i.kt)("inlineCode",{parentName:"p"},"max_value")," is not ",(0,i.kt)("inlineCode",{parentName:"p"},"None")," then all values will be less than or equal to ",(0,i.kt)("inlineCode",{parentName:"p"},"max_value"),"."),(0,i.kt)("h3",{id:"strategyshort_strings"},(0,i.kt)("inlineCode",{parentName:"h3"},"strategy.short_strings")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},"def short_strings() -> Strategy:\n")),(0,i.kt)("p",null,"Generates strings with ASCII characters of length that passes the condition ",(0,i.kt)("inlineCode",{parentName:"p"},"0 <= length <= 31"),"."),(0,i.kt)("div",{className:"admonition admonition-info alert alert--info"},(0,i.kt)("div",{parentName:"div",className:"admonition-heading"},(0,i.kt)("h5",{parentName:"div"},(0,i.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,i.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,i.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M7 2.3c3.14 0 5.7 2.56 5.7 5.7s-2.56 5.7-5.7 5.7A5.71 5.71 0 0 1 1.3 8c0-3.14 2.56-5.7 5.7-5.7zM7 1C3.14 1 0 4.14 0 8s3.14 7 7 7 7-3.14 7-7-3.14-7-7-7zm1 3H6v5h2V4zm0 6H6v2h2v-2z"}))),"info")),(0,i.kt)("div",{parentName:"div",className:"admonition-content"},(0,i.kt)("p",{parentName:"div"},"Max size ",(0,i.kt)("inlineCode",{parentName:"p"},"31")," comes from ",(0,i.kt)("a",{parentName:"p",href:"https://www.cairo-lang.org/docs/how_cairo_works/consts.html#short-string-literals"},"the docs"),"."))),(0,i.kt)("h2",{id:"adapting-strategies"},"Adapting strategies"),(0,i.kt)("p",null,"Often it is the case that a strategy does not produce exactly what is desired and it is necessary to further\nadapt the generated values.\nAlthough this could be done in tests directly, this hurts because fuzzer does not know about the adaptation and may repeatedly test the same values.\nThe ",(0,i.kt)("a",{parentName:"p",href:"/protostar/docs/tutorials/testing/cheatcodes/assume"},(0,i.kt)("inlineCode",{parentName:"a"},"assume"))," and ",(0,i.kt)("a",{parentName:"p",href:"/protostar/docs/tutorials/testing/cheatcodes/reject"},(0,i.kt)("inlineCode",{parentName:"a"},"reject"))," cheatcodes provide simple interfaces to adapt a advanced strategy.\nThose are not very good considering the performance.\nFuzzer can execute test on rejected data anyway and will just ignore failure when it happens."),(0,i.kt)("p",null,"Protostar provides ways to build strategies by transforming other ones."),(0,i.kt)("h3",{id:"mapping"},"Mapping"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},"class Strategy:\n    def map(self, mapping_function: Callable[[int], int]) -> Strategy: ...\n")),(0,i.kt)("p",null,"Applies provided mapping function to all searched inputs values."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python",metastring:'title="Example"',title:'"Example"'},"strategy.felts().map(lambda x: x // 2)\n")),(0,i.kt)("h3",{id:"filtering"},"Filtering"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},"class Strategy:\n    def filter(self, filter_function: Callable[[int], bool]) -> Strategy: ...\n")),(0,i.kt)("p",null,"Rejects examples not matching a condition."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python",metastring:'title="Example"',title:'"Example"'},"strategy.felts().filter(lambda x: x not in [3, 5, 8])\n")),(0,i.kt)("p",null,"The outcome is similar to using the ",(0,i.kt)("a",{parentName:"p",href:"/protostar/docs/tutorials/testing/cheatcodes/assume"},(0,i.kt)("inlineCode",{parentName:"a"},"assume"))," or ",(0,i.kt)("a",{parentName:"p",href:"/protostar/docs/tutorials/testing/cheatcodes/reject"},(0,i.kt)("inlineCode",{parentName:"a"},"reject"))," cheatcodes, but ",(0,i.kt)("inlineCode",{parentName:"p"},"filter")," does not\nrequire executing tested Cairo function and thus is more performant.\nTry to use ",(0,i.kt)("inlineCode",{parentName:"p"},"filter")," only to avoid unwanted corner cases rather than attempting to cut out a large\nportion of the searched input values."),(0,i.kt)("p",null,"Fuzzer draws random data from the original strategy and only afterwards checks if it passes filter conditions.\nIf too many variables are restricted, fuzzer will reject test execution."),(0,i.kt)("h3",{id:"combining"},"Combining"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},"def one_of(*strategies: Strategy) -> Strategy: ...\n")),(0,i.kt)("p",null,"Returns a strategy which generates values from any of the argument strategies."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python",metastring:'title="Example"',title:'"Example"'},"strategy.one_of(\n    strategy.integers(0, 100),\n    strategy.integers(1000, 1200),\n)\n")))}g.isMDXComponent=!0}}]);