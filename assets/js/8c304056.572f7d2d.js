"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[276],{3905:function(e,t,n){n.d(t,{Zo:function(){return l},kt:function(){return m}});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function c(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var i=r.createContext({}),p=function(e){var t=r.useContext(i),n=t;return e&&(n="function"==typeof e?e(t):c(c({},t),e)),n},l=function(e){var t=p(e.components);return r.createElement(i.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},u=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,i=e.parentName,l=s(e,["components","mdxType","originalType","parentName"]),u=p(n),m=a,f=u["".concat(i,".").concat(m)]||u[m]||d[m]||o;return n?r.createElement(f,c(c({ref:t},l),{},{components:n})):r.createElement(f,c({ref:t},l))}));function m(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,c=new Array(o);c[0]=u;var s={};for(var i in t)hasOwnProperty.call(t,i)&&(s[i]=t[i]);s.originalType=e,s.mdxType="string"==typeof e?e:a,c[1]=s;for(var p=2;p<o;p++)c[p]=n[p];return r.createElement.apply(null,c)}return r.createElement.apply(null,n)}u.displayName="MDXCreateElement"},8128:function(e,t,n){n.r(t),n.d(t,{assets:function(){return l},contentTitle:function(){return i},default:function(){return m},frontMatter:function(){return s},metadata:function(){return p},toc:function(){return d}});var r=n(7462),a=n(3366),o=(n(7294),n(3905)),c=["components"],s={},i="expect_events",p={unversionedId:"tutorials/testing/cheatcodes/expect-events",id:"tutorials/testing/cheatcodes/expect-events",title:"expect_events",description:"Compares expected events with events in the StarkNet state. You can use this cheatcode to test whether a contract emits specified events. Protostar compares events after a test case is completed. Therefore, you can use this cheatcode in any place within a test case.",source:"@site/docs/tutorials/07-testing/02-cheatcodes/expect-events.md",sourceDirName:"tutorials/07-testing/02-cheatcodes",slug:"/tutorials/testing/cheatcodes/expect-events",permalink:"/protostar/docs/tutorials/testing/cheatcodes/expect-events",editUrl:"https://github.com/software-mansion/protostar/tree/master/website/docs/tutorials/07-testing/02-cheatcodes/expect-events.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorials",previous:{title:"deploy",permalink:"/protostar/docs/tutorials/testing/cheatcodes/deploy"},next:{title:"expect_revert",permalink:"/protostar/docs/tutorials/testing/cheatcodes/expect-revert"}},l={},d=[],u={toc:d};function m(e){var t=e.components,n=(0,a.Z)(e,c);return(0,o.kt)("wrapper",(0,r.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"expect_events"},(0,o.kt)("inlineCode",{parentName:"h1"},"expect_events")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},' def expect_events(\n            *raw_expected_events: Union[\n                str, # Protostar interprets string as an event\'s name \n                TypedDict("ExpectedEvent", {\n                    "name": str,\n                    "data": NotRequired[Union[\n                      List[int],\n                      Dict[\n                        # e.g.\n                        # {"current_balance" : 37, "amount" : 21}\n                        # \n                        # for the following event signature:\n                        # @event\n                        # func balance_increased(current_balance : felt, amount : felt):\n                        # end\n                        DataTransformer.ArgumentName,\n                        DataTransformer.SupportedType,\n                      ]\n                    ]],\n                    "from_address": NotRequired[int]\n                },\n            )],\n        ) -> None: ...\n')),(0,o.kt)("p",null,"Compares expected events with events in the StarkNet state. You can use this cheatcode to test whether a contract emits specified events. Protostar compares events after a test case is completed. Therefore, you can use this cheatcode in any place within a test case."),(0,o.kt)("div",{className:"admonition admonition-tip alert alert--success"},(0,o.kt)("div",{parentName:"div",className:"admonition-heading"},(0,o.kt)("h5",{parentName:"div"},(0,o.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,o.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,o.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"}))),"tip")),(0,o.kt)("div",{parentName:"div",className:"admonition-content"},(0,o.kt)("p",{parentName:"div"},"You can provide ",(0,o.kt)("inlineCode",{parentName:"p"},'"data"')," as a dictionary to leverage ",(0,o.kt)("a",{parentName:"p",href:"/protostar/docs/tutorials/testing/cheatcodes/#data-transformer"},"data transformer"),"."))),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-cairo",metastring:'title="Protostar also checks the order of emitted events."',title:'"Protostar',also:!0,checks:!0,the:!0,order:!0,of:!0,emitted:!0,'events."':!0},'%lang starknet\n\n@event\nfunc foobar(number : felt):\nend\n\nfunc emit_foobar{syscall_ptr : felt*, range_check_ptr}(number : felt):\n    foobar.emit(number)\n    return ()\nend\n\n@contract_interface\nnamespace BasicContract:\n    func increase_balance():\n    end\nend\n\n# ----------------------------------------------\n\n@external\nfunc test_expect_events_are_in_declared_order{syscall_ptr : felt*, range_check_ptr}():\n    %{ expect_events({"name": "foobar", "data": [21]}, {"name": "foobar", "data": [37]}) %}\n    emit_foobar(21)\n    emit_foobar(37)\n    return ()\nend\n\n@external\nfunc test_expect_event_by_contract_address{syscall_ptr : felt*, range_check_ptr}():\n    alloc_locals\n    local contract_address : felt\n    %{\n        ids.contract_address = deploy_contract("./src/commands/test/examples/cheats/expect_events/basic_contract.cairo").contract_address\n        expect_events({"name": "balance_increased", "from_address": ids.contract_address})\n    %}\n    BasicContract.increase_balance(contract_address=contract_address)\n    return ()\nend\n')))}m.isMDXComponent=!0}}]);