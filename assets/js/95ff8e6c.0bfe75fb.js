"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[145],{3905:function(e,t,a){a.d(t,{Zo:function(){return d},kt:function(){return u}});var n=a(7294);function r(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function s(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function o(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?s(Object(a),!0).forEach((function(t){r(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):s(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function i(e,t){if(null==e)return{};var a,n,r=function(e,t){if(null==e)return{};var a,n,r={},s=Object.keys(e);for(n=0;n<s.length;n++)a=s[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(n=0;n<s.length;n++)a=s[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var c=n.createContext({}),l=function(e){var t=n.useContext(c),a=t;return e&&(a="function"==typeof e?e(t):o(o({},t),e)),a},d=function(e){var t=l(e.components);return n.createElement(c.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},m=n.forwardRef((function(e,t){var a=e.components,r=e.mdxType,s=e.originalType,c=e.parentName,d=i(e,["components","mdxType","originalType","parentName"]),m=l(a),u=r,h=m["".concat(c,".").concat(u)]||m[u]||p[u]||s;return a?n.createElement(h,o(o({ref:t},d),{},{components:a})):n.createElement(h,o({ref:t},d))}));function u(e,t){var a=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var s=a.length,o=new Array(s);o[0]=m;var i={};for(var c in t)hasOwnProperty.call(t,c)&&(i[c]=t[c]);i.originalType=e,i.mdxType="string"==typeof e?e:r,o[1]=i;for(var l=2;l<s;l++)o[l]=a[l];return n.createElement.apply(null,o)}return n.createElement.apply(null,a)}m.displayName="MDXCreateElement"},3654:function(e,t,a){a.r(t),a.d(t,{assets:function(){return d},contentTitle:function(){return c},default:function(){return u},frontMatter:function(){return i},metadata:function(){return l},toc:function(){return p}});var n=a(7462),r=a(3366),s=(a(7294),a(3905)),o=["components"],i={sidebar_label:"Testing (6 min)"},c="Testing",l={unversionedId:"tutorials/guides/testing",id:"tutorials/guides/testing",title:"Testing",description:"Protostar provides a flexible testing environment for Cairo smart contracts.",source:"@site/docs/tutorials/guides/testing.md",sourceDirName:"tutorials/guides",slug:"/tutorials/guides/testing",permalink:"/protostar/docs/tutorials/guides/testing",editUrl:"https://github.com/software-mansion/protostar/tree/master/website/docs/tutorials/guides/testing.md",tags:[],version:"current",frontMatter:{sidebar_label:"Testing (6 min)"},sidebar:"tutorials",previous:{title:"Deploying (1 min)",permalink:"/protostar/docs/tutorials/guides/deploying"}},d={},p=[{value:"Unit testing",id:"unit-testing",level:2},{value:"Deploying contracts from tests",id:"deploying-contracts-from-tests",level:2},{value:"Asserts",id:"asserts",level:2},{value:"<code>__setup__</code>",id:"__setup__",level:2},{value:"Cheatcodes",id:"cheatcodes",level:2},{value:"<code>mock_call</code>",id:"mock_call",level:3},{value:"Representing different data structures in <code>ret_data</code>",id:"representing-different-data-structures-in-ret_data",level:4},{value:"Felt",id:"felt",level:5},{value:"Array",id:"array",level:5},{value:"Struct",id:"struct",level:5},{value:"<code>expect_revert</code>",id:"expect_revert",level:3},{value:"<code>expect_events</code>",id:"expect_events",level:3},{value:"<code>deploy_contract</code>",id:"deploy_contract",level:3},{value:"<code>declare</code>",id:"declare",level:3},{value:"<code>prepare</code>",id:"prepare",level:3},{value:"<code>deploy</code>",id:"deploy",level:3},{value:"<code>start_prank</code>",id:"start_prank",level:3},{value:"In unit tests",id:"in-unit-tests",level:4},{value:"In integration tests",id:"in-integration-tests",level:4},{value:"<code>roll</code>",id:"roll",level:3},{value:"<code>warp</code>",id:"warp",level:3},{value:"<code>store</code>",id:"store",level:3},{value:"<code>load</code>",id:"load",level:3},{value:"Data Transformer",id:"data-transformer",level:2},{value:"What is a Data Transformer",id:"what-is-a-data-transformer",level:3},{value:"Using Data Transformer in cheatcodes",id:"using-data-transformer-in-cheatcodes",level:3},{value:"Example",id:"example",level:3}],m={toc:p};function u(e){var t=e.components,a=(0,r.Z)(e,o);return(0,s.kt)("wrapper",(0,n.Z)({},m,a,{components:t,mdxType:"MDXLayout"}),(0,s.kt)("h1",{id:"testing"},"Testing"),(0,s.kt)("p",null,"Protostar provides a flexible testing environment for Cairo smart contracts.\nIt allows to write unit/integration tests with a help of ",(0,s.kt)("a",{parentName:"p",href:"#cheatcodes"},"cheatcodes"),"."),(0,s.kt)("h2",{id:"unit-testing"},"Unit testing"),(0,s.kt)("p",null,"We will start with a ",(0,s.kt)("a",{parentName:"p",href:"/docs/tutorials/project-initialization"},"just created protostar project"),".\nIn your ",(0,s.kt)("inlineCode",{parentName:"p"},"src")," directory create a ",(0,s.kt)("inlineCode",{parentName:"p"},"utils.cairo")," file"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-code",metastring:'title="src/utils.cairo"',title:'"src/utils.cairo"'},"func sum_func{syscall_ptr : felt*, range_check_ptr}(a : felt, b : felt) -> (res : felt):\n    return (a+b)\nend\n")),(0,s.kt)("p",null,"This is our target function, which we are going to test.\nThen in the ",(0,s.kt)("inlineCode",{parentName:"p"},"tests")," directory create file ",(0,s.kt)("inlineCode",{parentName:"p"},"test_utils.cairo"),", which contains a single test case."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-code",metastring:'title="tests/test_utils.cairo"',title:'"tests/test_utils.cairo"'},"%lang starknet\n\nfrom src.utils import sum_func\n\n@external\nfunc test_sum{syscall_ptr : felt*, range_check_ptr}():\n    let (r) = sum_func(4,3)\n    assert r = 7\n    return ()\nend\n")),(0,s.kt)("p",null,"Then run your test with"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre"},"protostar test ./tests\n")),(0,s.kt)("div",{className:"admonition admonition-info alert alert--info"},(0,s.kt)("div",{parentName:"div",className:"admonition-heading"},(0,s.kt)("h5",{parentName:"div"},(0,s.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,s.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,s.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M7 2.3c3.14 0 5.7 2.56 5.7 5.7s-2.56 5.7-5.7 5.7A5.71 5.71 0 0 1 1.3 8c0-3.14 2.56-5.7 5.7-5.7zM7 1C3.14 1 0 4.14 0 8s3.14 7 7 7 7-3.14 7-7-3.14-7-7-7zm1 3H6v5h2V4zm0 6H6v2h2v-2z"}))),"info")),(0,s.kt)("div",{parentName:"div",className:"admonition-content"},(0,s.kt)("p",{parentName:"div"},"In the example above, Protostar will run every test case it manages to find in the ",(0,s.kt)("inlineCode",{parentName:"p"},"tests")," directory. You can read more about specifying where and how Protostar should search for test cases by running ",(0,s.kt)("inlineCode",{parentName:"p"},"protostar test --help"),". "))),(0,s.kt)("div",{className:"admonition admonition-tip alert alert--success"},(0,s.kt)("div",{parentName:"div",className:"admonition-heading"},(0,s.kt)("h5",{parentName:"div"},(0,s.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,s.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,s.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"}))),"tip")),(0,s.kt)("div",{parentName:"div",className:"admonition-content"},(0,s.kt)("p",{parentName:"div"},"If the test collecting phase takes too long, consider using ",(0,s.kt)("inlineCode",{parentName:"p"},"--fast-collecting")," flag. Protostar will use a different algorithm, which doesn't check if a test case is decorated with the ",(0,s.kt)("inlineCode",{parentName:"p"},"@external")," decorator or if an identifier with the name starting with ",(0,s.kt)("inlineCode",{parentName:"p"},"test_")," is a function."))),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-console",metastring:'title="expected result"',title:'"expected','result"':!0},"Collected 1 items\n\ntest_utils: .\n----- TEST SUMMARY ------\n1 passed\nRan 1 out of 1 total tests\n")),(0,s.kt)("div",{className:"admonition admonition-info alert alert--info"},(0,s.kt)("div",{parentName:"div",className:"admonition-heading"},(0,s.kt)("h5",{parentName:"div"},(0,s.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,s.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,s.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M7 2.3c3.14 0 5.7 2.56 5.7 5.7s-2.56 5.7-5.7 5.7A5.71 5.71 0 0 1 1.3 8c0-3.14 2.56-5.7 5.7-5.7zM7 1C3.14 1 0 4.14 0 8s3.14 7 7 7 7-3.14 7-7-3.14-7-7-7zm1 3H6v5h2V4zm0 6H6v2h2v-2z"}))),"info")),(0,s.kt)("div",{parentName:"div",className:"admonition-content"},(0,s.kt)("p",{parentName:"div"},"You can place your test files anywhere you want. Protostar recursively searches\nthe given directory for cairo files with a name starting with ",(0,s.kt)("inlineCode",{parentName:"p"},"test_")," and treats them as tests files.\nAll functions inside a test file starting with ",(0,s.kt)("inlineCode",{parentName:"p"},"test_")," are treated as separate test cases."))),(0,s.kt)("div",{className:"admonition admonition-warning alert alert--danger"},(0,s.kt)("div",{parentName:"div",className:"admonition-heading"},(0,s.kt)("h5",{parentName:"div"},(0,s.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,s.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,s.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M5.05.31c.81 2.17.41 3.38-.52 4.31C3.55 5.67 1.98 6.45.9 7.98c-1.45 2.05-1.7 6.53 3.53 7.7-2.2-1.16-2.67-4.52-.3-6.61-.61 2.03.53 3.33 1.94 2.86 1.39-.47 2.3.53 2.27 1.67-.02.78-.31 1.44-1.13 1.81 3.42-.59 4.78-3.42 4.78-5.56 0-2.84-2.53-3.22-1.25-5.61-1.52.13-2.03 1.13-1.89 2.75.09 1.08-1.02 1.8-1.86 1.33-.67-.41-.66-1.19-.06-1.78C8.18 5.31 8.68 2.45 5.05.32L5.03.3l.02.01z"}))),"warning")),(0,s.kt)("div",{parentName:"div",className:"admonition-content"},(0,s.kt)("p",{parentName:"div"},"The tested file cannot have a constructor that expects arguments because, Protostar won't be able to deploy the contract automatically. As a workaround, keep your constructor in a different file. You can test the constructor using the ",(0,s.kt)("inlineCode",{parentName:"p"},"deploy_contract")," cheatcode as described below."))),(0,s.kt)("h2",{id:"deploying-contracts-from-tests"},"Deploying contracts from tests"),(0,s.kt)("p",null,"For most projects such testing of isolated functions won't be enough. Protostar provides a ",(0,s.kt)("a",{parentName:"p",href:"#deploy_contract"},(0,s.kt)("inlineCode",{parentName:"a"},"deploy_contract")," cheatcode")," to test interactions between contracts.\nWe will use an example of a simple storage contract to show you how to deploy contract inside a test case."),(0,s.kt)("p",null,"First, inside a ",(0,s.kt)("inlineCode",{parentName:"p"},"src")," directory, create a ",(0,s.kt)("inlineCode",{parentName:"p"},"storage_contract.cairo")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-code",metastring:'title="src/storage_contract.cairo"',title:'"src/storage_contract.cairo"'},"%lang starknet\n\nfrom starkware.cairo.common.cairo_builtins import HashBuiltin\nfrom starkware.cairo.common.uint256 import Uint256, uint256_add\n\n# Define a storage variable.\n@storage_var\nfunc balance() -> (res : Uint256):\nend\n\n@storage_var\nfunc id() -> (res : felt):\nend\n\n# Increases the balance by the given amount.\n@external\nfunc increase_balance{syscall_ptr : felt*, pedersen_ptr : HashBuiltin*, range_check_ptr}(\n        amount : Uint256):\n    let (read_balance) = balance.read()\n    let (new_balance, carry) = uint256_add(read_balance, amount)\n    assert carry = 0\n    balance.write(new_balance)\n    return ()\nend\n\n# Returns the current balance.\n@view\nfunc get_balance{syscall_ptr : felt*, pedersen_ptr : HashBuiltin*, range_check_ptr}() -> (\n        res : Uint256):\n    let (res) = balance.read()\n    return (res)\nend\n\n@view\nfunc get_id{syscall_ptr : felt*, pedersen_ptr : HashBuiltin*, range_check_ptr}() -> (res : felt):\n    let (res) = id.read()\n    return (res)\nend\n\n@constructor\nfunc constructor{syscall_ptr : felt*, pedersen_ptr : HashBuiltin*, range_check_ptr}(\n        initial_balance : Uint256, _id : felt):\n    balance.write(initial_balance)\n    id.write(_id)\n    return ()\nend\n\n")),(0,s.kt)("p",null,"Then we can create a test case for the contract.\nInside ",(0,s.kt)("inlineCode",{parentName:"p"},"tests")," directory, create a ",(0,s.kt)("inlineCode",{parentName:"p"},"test_storage_contract.cairo")," file."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-code",metastring:'title="tests/test_storage_contract.cairo"',title:'"tests/test_storage_contract.cairo"'},'%lang starknet\nfrom starkware.cairo.common.uint256 import Uint256\n\n@contract_interface\nnamespace StorageContract:\n    func increase_balance(amount : Uint256):\n    end\n\n    func get_balance() -> (res : Uint256):\n    end\n\n    func get_id() -> (res : felt):\n    end\nend\n\n@external\nfunc test_proxy_contract{syscall_ptr : felt*, range_check_ptr}():\n    alloc_locals\n\n    local contract_address : felt\n    # We deploy contract and put its address into a local variable. Second argument is calldata array\n    %{ ids.contract_address = deploy_contract("./src/storage_contract.cairo", [100, 0, 1]).contract_address %}\n\n    let (res) = StorageContract.get_balance(contract_address=contract_address)\n    assert res.low = 100\n    assert res.high = 0\n\n    let (id) = StorageContract.get_id(contract_address=contract_address)\n    assert id = 1\n\n    StorageContract.increase_balance(contract_address=contract_address, amount=Uint256(50, 0))\n\n    let (res) = StorageContract.get_balance(contract_address=contract_address)\n    assert res.low = 150\n    assert res.high = 0\n    return ()\nend\n')),(0,s.kt)("div",{className:"admonition admonition-info alert alert--info"},(0,s.kt)("div",{parentName:"div",className:"admonition-heading"},(0,s.kt)("h5",{parentName:"div"},(0,s.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,s.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,s.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M7 2.3c3.14 0 5.7 2.56 5.7 5.7s-2.56 5.7-5.7 5.7A5.71 5.71 0 0 1 1.3 8c0-3.14 2.56-5.7 5.7-5.7zM7 1C3.14 1 0 4.14 0 8s3.14 7 7 7 7-3.14 7-7-3.14-7-7-7zm1 3H6v5h2V4zm0 6H6v2h2v-2z"}))),"info")),(0,s.kt)("div",{parentName:"div",className:"admonition-content"},(0,s.kt)("p",{parentName:"div"},"Please refer to ",(0,s.kt)("a",{parentName:"p",href:"https://www.cairo-lang.org/docs/hello_starknet/more_features.html#passing-tuples-and-structs-in-calldata"},'"passing typles and structs in calldata"')," on how to serialize your constructor arguments to array of integers"))),(0,s.kt)("p",null,"Then run your test with"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre"},"protostar test ./tests\n")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-console",metastring:'title="expected result"',title:'"expected','result"':!0},"Collected 2 items\n\nstorage_test: .\ntest_utils: .\n----- TEST SUMMARY ------\n2 passed\nRan 2 out of 2 total tests\n")),(0,s.kt)("h2",{id:"asserts"},"Asserts"),(0,s.kt)("p",null,"Protostar ships with its own assert functions. They don't accept ",(0,s.kt)("a",{parentName:"p",href:"https://www.cairo-lang.org/docs/how_cairo_works/builtins.html?highlight=implicit%20arguments#implicit-arguments"},"implicit arguments")," compared to asserts from ",(0,s.kt)("a",{parentName:"p",href:"https://github.com/starkware-libs/cairo-lang/blob/master/src/starkware/cairo/common/math.cairo"},(0,s.kt)("inlineCode",{parentName:"a"},"starkware.cairo.common.math")),". You can import Protostar asserts in the following way:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-cairo",metastring:'title="test_my_contract.cairo"',title:'"test_my_contract.cairo"'},"from protostar.asserts import (\n    assert_eq, assert_not_eq, assert_signed_lt, assert_signed_le, assert_signed_gt,\n    assert_unsigned_lt, assert_unsigned_le, assert_unsigned_gt, assert_signed_ge,\n    assert_unsigned_ge)\n")),(0,s.kt)("div",{className:"admonition admonition-info alert alert--info"},(0,s.kt)("div",{parentName:"div",className:"admonition-heading"},(0,s.kt)("h5",{parentName:"div"},(0,s.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,s.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,s.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M7 2.3c3.14 0 5.7 2.56 5.7 5.7s-2.56 5.7-5.7 5.7A5.71 5.71 0 0 1 1.3 8c0-3.14 2.56-5.7 5.7-5.7zM7 1C3.14 1 0 4.14 0 8s3.14 7 7 7 7-3.14 7-7-3.14-7-7-7zm1 3H6v5h2V4zm0 6H6v2h2v-2z"}))),"info")),(0,s.kt)("div",{parentName:"div",className:"admonition-content"},(0,s.kt)("p",{parentName:"div"},"If your IDE supports Cairo and doesn't know how to import ",(0,s.kt)("inlineCode",{parentName:"p"},"protostar"),", add the following directory\n",(0,s.kt)("inlineCode",{parentName:"p"},"$(which protostar)/../cairo")," to the ",(0,s.kt)("a",{parentName:"p",href:"https://www.cairo-lang.org/docs/how_cairo_works/imports.html?highlight=cairo_path"},(0,s.kt)("inlineCode",{parentName:"a"},"CAIRO_PATH")),"."))),(0,s.kt)("p",null,"You can find all ",(0,s.kt)("a",{parentName:"p",href:"https://github.com/software-mansion/protostar/blob/master/cairo/protostar/asserts.cairo"},"assert signatures here"),"."),(0,s.kt)("h2",{id:"__setup__"},(0,s.kt)("inlineCode",{parentName:"h2"},"__setup__")),(0,s.kt)("p",null,"Often while writing tests you have some setup work that needs to happen before tests run. The hook ",(0,s.kt)("inlineCode",{parentName:"p"},"__setup__")," can simplify and speed up your tests. Use ",(0,s.kt)("inlineCode",{parentName:"p"},"context")," variable to pass data from ",(0,s.kt)("inlineCode",{parentName:"p"},"__setup__")," to test functions as demonstrated on the example below:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-cairo"},'%lang starknet\n\n@external\nfunc __setup__():\n    %{ context.contract_a_address = deploy_contract("./tests/integration/testing_hooks/basic_contract.cairo").contract_address %}\n    return ()\nend\n\n@external\nfunc test_something():\n    tempvar contract_address\n    %{ ids.contract_address = context.contract_a_address %}\n\n    # ...\n\n    return ()\nend\n')),(0,s.kt)("div",{className:"admonition admonition-info alert alert--info"},(0,s.kt)("div",{parentName:"div",className:"admonition-heading"},(0,s.kt)("h5",{parentName:"div"},(0,s.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,s.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,s.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M7 2.3c3.14 0 5.7 2.56 5.7 5.7s-2.56 5.7-5.7 5.7A5.71 5.71 0 0 1 1.3 8c0-3.14 2.56-5.7 5.7-5.7zM7 1C3.14 1 0 4.14 0 8s3.14 7 7 7 7-3.14 7-7-3.14-7-7-7zm1 3H6v5h2V4zm0 6H6v2h2v-2z"}))),"info")),(0,s.kt)("div",{parentName:"div",className:"admonition-content"},(0,s.kt)("p",{parentName:"div"},"Protostar executes ",(0,s.kt)("inlineCode",{parentName:"p"},"__setup__")," only once per a ",(0,s.kt)("a",{parentName:"p",href:"https://en.wikipedia.org/wiki/Test_suite"},"test suite"),". Then, for each test case Protostar copies the StarkNet state and ",(0,s.kt)("inlineCode",{parentName:"p"},"context")," object."))),(0,s.kt)("h2",{id:"cheatcodes"},"Cheatcodes"),(0,s.kt)("p",null,"Most of the time, testing smart contracts with assertions only is not enough. Some test cases require manipulating the state of the blockchain, as well as checking for reverts and events. For that reason, Protostar provides a set of cheatcodes."),(0,s.kt)("p",null,"Cheatcodes are available inside of ",(0,s.kt)("a",{parentName:"p",href:"https://www.cairo-lang.org/docs/hello_cairo/program_input.html#hints"},"Cairo hints"),". You don't have to import anything. When Protostar runs tests, it replaces some core elements in ",(0,s.kt)("a",{parentName:"p",href:"https://pypi.org/project/cairo-lang/"},"cairo-lang")," library and inject cheatcodes to the hint scope."),(0,s.kt)("div",{className:"admonition admonition-note alert alert--secondary"},(0,s.kt)("div",{parentName:"div",className:"admonition-heading"},(0,s.kt)("h5",{parentName:"div"},(0,s.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,s.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,s.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"}))),"note")),(0,s.kt)("div",{parentName:"div",className:"admonition-content"},(0,s.kt)("p",{parentName:"div"},"If you are familiar with ",(0,s.kt)("a",{parentName:"p",href:"https://book.getfoundry.sh/forge/cheatcodes.html"},"Foundry"),", you will recognize most cheatcodes."))),(0,s.kt)("h3",{id:"mock_call"},(0,s.kt)("inlineCode",{parentName:"h3"},"mock_call")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-python"},"def mock_call(contract_address: int, fn_name: str, ret_data: Union[List[int], Dict]) -> Callable: ...\n")),(0,s.kt)("p",null,"Mocks all calls to function with the name ",(0,s.kt)("inlineCode",{parentName:"p"},"fn_name")," of a contract with an address ",(0,s.kt)("inlineCode",{parentName:"p"},"contract_address")," until the returned callable is called. Mocked call returns data provided in ",(0,s.kt)("inlineCode",{parentName:"p"},"ret_data"),". Mock works globally, for all of the contracts, not only the testing contract."),(0,s.kt)("div",{className:"admonition admonition-tip alert alert--success"},(0,s.kt)("div",{parentName:"div",className:"admonition-heading"},(0,s.kt)("h5",{parentName:"div"},(0,s.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,s.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,s.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"}))),"tip")),(0,s.kt)("div",{parentName:"div",className:"admonition-content"},(0,s.kt)("p",{parentName:"div"},"You can provide constructor arguments as a dictionary to leverage ",(0,s.kt)("a",{parentName:"p",href:"/docs/tutorials/guides/testing#data-transformer"},"data transformer"),"."))),(0,s.kt)("h4",{id:"representing-different-data-structures-in-ret_data"},"Representing different data structures in ",(0,s.kt)("inlineCode",{parentName:"h4"},"ret_data")),(0,s.kt)("p",null,"To use ",(0,s.kt)("inlineCode",{parentName:"p"},"mock_call")," effectively, you need to understand how Cairo data structures are represented under the hood. ",(0,s.kt)("inlineCode",{parentName:"p"},"Cairo-lang")," operates on a list of integers. The following examples demonstrate how each data structure is represented in Python code."),(0,s.kt)("h5",{id:"felt"},"Felt"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-cairo",metastring:'title="mocked_call returns a felt"',title:'"mocked_call',returns:!0,a:!0,'felt"':!0},'%lang starknet\n\n@contract_interface\nnamespace ITestContract:\n    func get_felt() -> (res : felt):\n    end\nend\n\nconst EXTERNAL_CONTRACT_ADDRESS = 0x3fe90a1958bb8468fb1b62970747d8a00c435ef96cda708ae8de3d07f1bb56b\n\n@external\nfunc test_mock_call_returning_felt{syscall_ptr : felt*, range_check_ptr}():\n  tempvar external_contract_address = EXTERNAL_CONTRACT_ADDRESS\n\n  %{ stop_mock = mock_call(ids.external_contract_address, "get_felt", [42]) %}\n  let (res) = ITestContract.get_felt(EXTERNAL_CONTRACT_ADDRESS)\n  %{ stop_mock() %}\n\n  assert res = 42\n  return ()\nend\n')),(0,s.kt)("h5",{id:"array"},"Array"),(0,s.kt)("p",null,"To mock a function returning an array, provide data in the following format to ",(0,s.kt)("inlineCode",{parentName:"p"},"ret_data"),":"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-python",metastring:'title="Python representation of a Cairo array"',title:'"Python',representation:!0,of:!0,a:!0,Cairo:!0,'array"':!0},"[n, value_1, value_2, ..., value_n]\n")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-cairo",metastring:'title="mocked_call returns an array"',title:'"mocked_call',returns:!0,an:!0,'array"':!0},'%lang starknet\n\n@contract_interface\nnamespace ITestContract:\n    func get_array() -> (res_len : felt, res : felt*):\n    end\nend\n\nconst EXTERNAL_CONTRACT_ADDRESS = 0x3fe90a1958bb8468fb1b62970747d8a00c435ef96cda708ae8de3d07f1bb56b\n\n@external\nfunc test_mock_call_returning_array{syscall_ptr : felt*, range_check_ptr}():\n  tempvar external_contract_address = EXTERNAL_CONTRACT_ADDRESS\n\n  %{ stop_mock = mock_call(ids.external_contract_address, "get_array", [1, 42]) %}\n  let (res_len, res_arr) = ITestContract.get_array(EXTERNAL_CONTRACT_ADDRESS)\n  %{ stop_mock() %}\n\n  assert res_arr[0] = 42\n  return ()\nend\n')),(0,s.kt)("h5",{id:"struct"},"Struct"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-cairo",metastring:'title="mocked_call returns a struct"',title:'"mocked_call',returns:!0,a:!0,'struct"':!0},'%lang starknet\n\nstruct Point:\n    member x : felt\n    member y : felt\nend\n\n@contract_interface\nnamespace ITestContract:\n    func get_struct() -> (res : Point):\n    end\nend\n\nconst EXTERNAL_CONTRACT_ADDRESS = 0x3fe90a1958bb8468fb1b62970747d8a00c435ef96cda708ae8de3d07f1bb56b\n\n@external\nfunc test_mock_call_returning_struct{syscall_ptr : felt*, range_check_ptr}():\n  tempvar external_contract_address = EXTERNAL_CONTRACT_ADDRESS\n\n  %{ stop_mock = mock_call(ids.external_contract_address, "get_struct", [21,37]) %}\n  let (res_struct) = ITestContract.get_struct(EXTERNAL_CONTRACT_ADDRESS)\n  %{ stop_mock() %}\n\n  assert res_struct.x = 21\n  assert res_struct.y = 37\n  return ()\nend\n')),(0,s.kt)("h3",{id:"expect_revert"},(0,s.kt)("inlineCode",{parentName:"h3"},"expect_revert")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-python"},"def expect_revert(error_type: Optional[str] = None, error_message: Optional[str] = None) -> None: ...\n")),(0,s.kt)("p",null,"If a code beneath ",(0,s.kt)("inlineCode",{parentName:"p"},"expect_revert")," raises a specified exception, a test will pass. If not, a test will fail."),(0,s.kt)("div",{className:"admonition admonition-info alert alert--info"},(0,s.kt)("div",{parentName:"div",className:"admonition-heading"},(0,s.kt)("h5",{parentName:"div"},(0,s.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,s.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,s.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M7 2.3c3.14 0 5.7 2.56 5.7 5.7s-2.56 5.7-5.7 5.7A5.71 5.71 0 0 1 1.3 8c0-3.14 2.56-5.7 5.7-5.7zM7 1C3.14 1 0 4.14 0 8s3.14 7 7 7 7-3.14 7-7-3.14-7-7-7zm1 3H6v5h2V4zm0 6H6v2h2v-2z"}))),"info")),(0,s.kt)("div",{parentName:"div",className:"admonition-content"},(0,s.kt)("p",{parentName:"div"},"Protostar displays an error type and a message when a test fails."))),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-cairo",metastring:'title="This test passes despite calling an uninitialized contract."',title:'"This',test:!0,passes:!0,despite:!0,calling:!0,an:!0,uninitialized:!0,'contract."':!0},'%lang starknet\n\n@contract_interface\nnamespace BasicContract:\n    func increase_balance(amount : felt):\n    end\n\n    func get_balance() -> (res : felt):\n    end\nend\n\n@external\nfunc test_failing_to_call_external_contract{syscall_ptr : felt*, range_check_ptr}():\n    alloc_locals\n\n    %{ expect_revert("UNINITIALIZED_CONTRACT") %}\n    BasicContract.increase_balance(contract_address=21, amount=3)\n\n    return ()\nend\n')),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-cairo",metastring:"title=\"'except_revert' checks if the last error annotation contains 'error_message'.\"",title:"\"'except_revert'",checks:!0,if:!0,the:!0,last:!0,error:!0,annotation:!0,contains:!0,"'error_message'.\"":!0},'%lang starknet\n\nfunc inverse(x) -> (res):\n    with_attr error_message("x must not be zero. Got x={x}."):\n        return (res=1 / x)\n    end\nend\n\nfunc assert_not_equal(a, b):\n    let diff = a - b\n    with_attr error_message("a and b must be distinct."):\n        inverse(diff)\n    end\n    return ()\nend\n\n@external\nfunc test_error_message{syscall_ptr : felt*, range_check_ptr}():\n    %{ expect_revert(error_message="must be distinct") %}\n    assert_not_equal(0, 0)\n    return ()\nend\n')),(0,s.kt)("div",{className:"admonition admonition-tip alert alert--success"},(0,s.kt)("div",{parentName:"div",className:"admonition-heading"},(0,s.kt)("h5",{parentName:"div"},(0,s.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,s.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,s.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"}))),"tip")),(0,s.kt)("div",{parentName:"div",className:"admonition-content"},(0,s.kt)("p",{parentName:"div"},"Use ",(0,s.kt)("a",{parentName:"p",href:"https://www.cairo-lang.org/docs/how_cairo_works/scope_attributes.html?highlight=with_attr"},"scope attributes")," to annotate a code block with an informative error message."))),(0,s.kt)("h3",{id:"expect_events"},(0,s.kt)("inlineCode",{parentName:"h3"},"expect_events")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-python"},' def expect_events(\n            *raw_expected_events: Union[\n                str, # Protostar interprets string as an event\'s name \n                TypedDict("ExpectedEvent", {\n                    "name": str,\n                    "data": NotRequired[Union[\n                      List[int],\n                      Dict[\n                        # e.g.\n                        # {"current_balance" : 37, "amount" : 21}\n                        # \n                        # for the following event signature:\n                        # @event\n                        # func balance_increased(current_balance : felt, amount : felt):\n                        # end\n                        DataTransformer.ArgumentName,\n                        DataTransformer.SupportedType,\n                      ]\n                    ]],\n                    "from_address": NotRequired[int]\n                },\n            )],\n        ) -> None: ...\n')),(0,s.kt)("p",null,"Compares expected events with events in the StarkNet state. You can use this cheatcode to test whether a contract emits specified events. Protostar compares events after a test case is completed. Therefore, you can use this cheatcode in any place within a test case."),(0,s.kt)("div",{className:"admonition admonition-tip alert alert--success"},(0,s.kt)("div",{parentName:"div",className:"admonition-heading"},(0,s.kt)("h5",{parentName:"div"},(0,s.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,s.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,s.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"}))),"tip")),(0,s.kt)("div",{parentName:"div",className:"admonition-content"},(0,s.kt)("p",{parentName:"div"},"You can provide ",(0,s.kt)("inlineCode",{parentName:"p"},'"data"')," as a dictionary to leverage ",(0,s.kt)("a",{parentName:"p",href:"/docs/tutorials/guides/testing#data-transformer"},"data transformer"),"."))),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-cairo",metastring:'title="Protostar also checks the order of emitted events."',title:'"Protostar',also:!0,checks:!0,the:!0,order:!0,of:!0,emitted:!0,'events."':!0},'%lang starknet\n\n@event\nfunc foobar(number : felt):\nend\n\nfunc emit_foobar{syscall_ptr : felt*, range_check_ptr}(number : felt):\n    foobar.emit(number)\n    return ()\nend\n\n@contract_interface\nnamespace BasicContract:\n    func increase_balance():\n    end\nend\n\n# ----------------------------------------------\n\n@external\nfunc test_expect_events_are_in_declared_order{syscall_ptr : felt*, range_check_ptr}():\n    %{ expect_events({"name": "foobar", "data": [21]}, {"name": "foobar", "data": [37]}) %}\n    emit_foobar(21)\n    emit_foobar(37)\n    return ()\nend\n\n@external\nfunc test_expect_event_by_contract_address{syscall_ptr : felt*, range_check_ptr}():\n    alloc_locals\n    local contract_address : felt\n    %{\n        ids.contract_address = deploy_contract("./src/commands/test/examples/cheats/expect_events/basic_contract.cairo").contract_address\n        expect_events({"name": "balance_increased", "from_address": ids.contract_address})\n    %}\n    BasicContract.increase_balance(contract_address=contract_address)\n    return ()\nend\n')),(0,s.kt)("h3",{id:"deploy_contract"},(0,s.kt)("inlineCode",{parentName:"h3"},"deploy_contract")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-python"},"def deploy_contract(contract_path: str, constructor_calldata: Optional[Union[List[int], Dict]] = None) -> DeployedContact:\n\nclass DeployedContract:\n    contract_address: int\n")),(0,s.kt)("p",null,"Deploys a contract given a path relative to a Protostar project root. The section ",(0,s.kt)("a",{parentName:"p",href:"#deploying-contracts-from-tests"},"Deploying contracts from tests")," demonstrates a usage of this cheatcode."),(0,s.kt)("div",{className:"admonition admonition-warning alert alert--danger"},(0,s.kt)("div",{parentName:"div",className:"admonition-heading"},(0,s.kt)("h5",{parentName:"div"},(0,s.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,s.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,s.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M5.05.31c.81 2.17.41 3.38-.52 4.31C3.55 5.67 1.98 6.45.9 7.98c-1.45 2.05-1.7 6.53 3.53 7.7-2.2-1.16-2.67-4.52-.3-6.61-.61 2.03.53 3.33 1.94 2.86 1.39-.47 2.3.53 2.27 1.67-.02.78-.31 1.44-1.13 1.81 3.42-.59 4.78-3.42 4.78-5.56 0-2.84-2.53-3.22-1.25-5.61-1.52.13-2.03 1.13-1.89 2.75.09 1.08-1.02 1.8-1.86 1.33-.67-.41-.66-1.19-.06-1.78C8.18 5.31 8.68 2.45 5.05.32L5.03.3l.02.01z"}))),"warning")),(0,s.kt)("div",{parentName:"div",className:"admonition-content"},(0,s.kt)("p",{parentName:"div"},"Deploying a contract is a slow operation. If it's possible try using this cheatcode in the ",(0,s.kt)("a",{parentName:"p",href:"#__setup__"},(0,s.kt)("inlineCode",{parentName:"a"},"__setup__")," hook"),"."))),(0,s.kt)("div",{className:"admonition admonition-info alert alert--info"},(0,s.kt)("div",{parentName:"div",className:"admonition-heading"},(0,s.kt)("h5",{parentName:"div"},(0,s.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,s.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,s.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M7 2.3c3.14 0 5.7 2.56 5.7 5.7s-2.56 5.7-5.7 5.7A5.71 5.71 0 0 1 1.3 8c0-3.14 2.56-5.7 5.7-5.7zM7 1C3.14 1 0 4.14 0 8s3.14 7 7 7 7-3.14 7-7-3.14-7-7-7zm1 3H6v5h2V4zm0 6H6v2h2v-2z"}))),"info")),(0,s.kt)("div",{parentName:"div",className:"admonition-content"},(0,s.kt)("p",{parentName:"div"},(0,s.kt)("inlineCode",{parentName:"p"},"deploy_contract")," is just a syntactic sugar over executing cheatcodes ",(0,s.kt)("inlineCode",{parentName:"p"},"declare")," -> ",(0,s.kt)("inlineCode",{parentName:"p"},"prepare")," -> ",(0,s.kt)("inlineCode",{parentName:"p"},"deploy")," separately, and it's what does it under the hood."))),(0,s.kt)("div",{className:"admonition admonition-tip alert alert--success"},(0,s.kt)("div",{parentName:"div",className:"admonition-heading"},(0,s.kt)("h5",{parentName:"div"},(0,s.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,s.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,s.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"}))),"tip")),(0,s.kt)("div",{parentName:"div",className:"admonition-content"},(0,s.kt)("p",{parentName:"div"},"You can provide ",(0,s.kt)("inlineCode",{parentName:"p"},"constructor_calldata")," as a dictionary to leverage ",(0,s.kt)("a",{parentName:"p",href:"/docs/tutorials/guides/testing#data-transformer"},"data transformer"),"."))),(0,s.kt)("h3",{id:"declare"},(0,s.kt)("inlineCode",{parentName:"h3"},"declare")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-python"},"def declare(contract_path: str) -> DeclaredContract:\n\nclass DeclaredContract:\n    class_hash: int\n")),(0,s.kt)("p",null,"Declares contract given a path relative to a Protostar project root."),(0,s.kt)("h3",{id:"prepare"},(0,s.kt)("inlineCode",{parentName:"h3"},"prepare")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-python"},"def prepare(declared: DeclaredContract, constructor_calldata: Optional[Union[List[int], Dict]]] = None) -> PreparedContract:\n\nclass PreparedContract:\n    constructor_calldata: List[int]\n    contract_address: int\n    class_hash: int\n")),(0,s.kt)("p",null,"Prepares contract for deployment given ",(0,s.kt)("inlineCode",{parentName:"p"},"DeclaredContract")," and constructor_calldata. The cheatcode is useful when you want to know contract address before deploying it to affect constructor with a targeted cheatcode. Example:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre"},'@external\nfunc test_prank_constructor{syscall_ptr : felt*, range_check_ptr}():\n    %{\n        declared = declare("path/to/contract.cairo")\n        prepared = prepare(declared, [1,2,3])\n        start_prank(111, target_contract_address=prepared.contract_address)\n\n        # constructor will be affected by prank\n        deploy(prepared)\n    %}\n    return ()\nend\n\n')),(0,s.kt)("div",{className:"admonition admonition-info alert alert--info"},(0,s.kt)("div",{parentName:"div",className:"admonition-heading"},(0,s.kt)("h5",{parentName:"div"},(0,s.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,s.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,s.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M7 2.3c3.14 0 5.7 2.56 5.7 5.7s-2.56 5.7-5.7 5.7A5.71 5.71 0 0 1 1.3 8c0-3.14 2.56-5.7 5.7-5.7zM7 1C3.14 1 0 4.14 0 8s3.14 7 7 7 7-3.14 7-7-3.14-7-7-7zm1 3H6v5h2V4zm0 6H6v2h2v-2z"}))),"info")),(0,s.kt)("div",{parentName:"div",className:"admonition-content"},(0,s.kt)("p",{parentName:"div"},"You can prepare multiple contracts from one ",(0,s.kt)("inlineCode",{parentName:"p"},"DeclaredContract"),"."))),(0,s.kt)("div",{className:"admonition admonition-tip alert alert--success"},(0,s.kt)("div",{parentName:"div",className:"admonition-heading"},(0,s.kt)("h5",{parentName:"div"},(0,s.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,s.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,s.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"}))),"tip")),(0,s.kt)("div",{parentName:"div",className:"admonition-content"},(0,s.kt)("p",{parentName:"div"},"You can provide ",(0,s.kt)("inlineCode",{parentName:"p"},"constructor_calldata")," as a dictionary to leverage ",(0,s.kt)("a",{parentName:"p",href:"/docs/tutorials/guides/testing#data-transformer"},"data transformer"),"."))),(0,s.kt)("h3",{id:"deploy"},(0,s.kt)("inlineCode",{parentName:"h3"},"deploy")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre"},"def deploy(prepared: PreparedContract) -> DeployedContract:\n\nclass DeployedContract:\n    contract_address: int\n")),(0,s.kt)("p",null,"Deploys contract for deployment given ",(0,s.kt)("inlineCode",{parentName:"p"},"PreparedContract"),". "),(0,s.kt)("div",{className:"admonition admonition-warning alert alert--danger"},(0,s.kt)("div",{parentName:"div",className:"admonition-heading"},(0,s.kt)("h5",{parentName:"div"},(0,s.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,s.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,s.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M5.05.31c.81 2.17.41 3.38-.52 4.31C3.55 5.67 1.98 6.45.9 7.98c-1.45 2.05-1.7 6.53 3.53 7.7-2.2-1.16-2.67-4.52-.3-6.61-.61 2.03.53 3.33 1.94 2.86 1.39-.47 2.3.53 2.27 1.67-.02.78-.31 1.44-1.13 1.81 3.42-.59 4.78-3.42 4.78-5.56 0-2.84-2.53-3.22-1.25-5.61-1.52.13-2.03 1.13-1.89 2.75.09 1.08-1.02 1.8-1.86 1.33-.67-.41-.66-1.19-.06-1.78C8.18 5.31 8.68 2.45 5.05.32L5.03.3l.02.01z"}))),"warning")),(0,s.kt)("div",{parentName:"div",className:"admonition-content"},(0,s.kt)("p",{parentName:"div"},"You can't deploy the same ",(0,s.kt)("inlineCode",{parentName:"p"},"PreparedContract")," twice."))),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-cairo",metastring:'title="./src/main.cairo"',title:'"./src/main.cairo"'},"@constructor\nfunc constructor(initial_balance : Uint256, contract_id : felt):\n    # ...\n    return ()\nend\n")),(0,s.kt)("div",{className:"admonition admonition-info alert alert--info"},(0,s.kt)("div",{parentName:"div",className:"admonition-heading"},(0,s.kt)("h5",{parentName:"div"},(0,s.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,s.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,s.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M7 2.3c3.14 0 5.7 2.56 5.7 5.7s-2.56 5.7-5.7 5.7A5.71 5.71 0 0 1 1.3 8c0-3.14 2.56-5.7 5.7-5.7zM7 1C3.14 1 0 4.14 0 8s3.14 7 7 7 7-3.14 7-7-3.14-7-7-7zm1 3H6v5h2V4zm0 6H6v2h2v-2z"}))),"info")),(0,s.kt)("div",{parentName:"div",className:"admonition-content"},(0,s.kt)("p",{parentName:"div"},"To learn more how data is transformed from Python to Cairo read ",(0,s.kt)("a",{parentName:"p",href:"https://starknetpy.readthedocs.io/en/latest/guide.html#data-transformation"},"Data transformation section in the Starknet.py's documentation"),"."))),(0,s.kt)("h3",{id:"start_prank"},(0,s.kt)("inlineCode",{parentName:"h3"},"start_prank")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-python"},"def start_prank(caller_address: int, target_contract_address: Optional[int] = None) -> Callable: ...\n")),(0,s.kt)("p",null,"Changes a caller address returned by ",(0,s.kt)("inlineCode",{parentName:"p"},"get_caller_address()")," until the returned callable is called. If ",(0,s.kt)("inlineCode",{parentName:"p"},"target_contract_address")," is specified, ",(0,s.kt)("inlineCode",{parentName:"p"},"start_prank")," affects only the contract with the specified address. Otherwise, ",(0,s.kt)("inlineCode",{parentName:"p"},"start_prank")," affects the current contract."),(0,s.kt)("h4",{id:"in-unit-tests"},"In unit tests"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-cairo",metastring:'title="Local assert passes"',title:'"Local',assert:!0,'passes"':!0},"\n@external\nfunc test_remote_prank{syscall_ptr : felt*, range_check_ptr}():\n    %{ stop_prank_callable = start_prank(123) %}\n\n    let (caller_addr) = get_caller_address()\n    # Does not raise error\n    assert caller_addr = 123\n\n    %{ stop_prank_callable() %}\n    return ()\nend\n")),(0,s.kt)("h4",{id:"in-integration-tests"},"In integration tests"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-cairo",metastring:'title="./pranked_contract.cairo"',title:'"./pranked_contract.cairo"'},'%lang starknet\n\nfrom starkware.starknet.common.syscalls import (get_caller_address)\n\n@external\nfunc assert_pranked{syscall_ptr : felt*}():\n    let (caller_addr) = get_caller_address()\n    with_attr error_message("Not pranked!"):\n        assert caller_addr = 123\n    end\n    return ()\nend\n')),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-cairo",metastring:'title="Remote assert passes"',title:'"Remote',assert:!0,'passes"':!0},'@contract_interface\nnamespace Pranked:\n    func assert_pranked() -> ():\n    end\nend\n\n@external\nfunc test_remote_prank{syscall_ptr : felt*, range_check_ptr}():\n    alloc_locals\n    local contract_address : felt\n    %{ \n        ids.contract_address = deploy_contract("./pranked_contract.cairo").contract_address \n        stop_prank_callable = start_prank(123, target_contract_address=ids.contract_address)\n    %}\n    # Does not raise error\n    Pranked.assert_pranked(contract_address=contract_address)\n    %{ stop_prank_callable() %}\n    return ()\nend\n')),(0,s.kt)("h3",{id:"roll"},(0,s.kt)("inlineCode",{parentName:"h3"},"roll")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-python"},"def roll(blk_number: int, target_contract_address: Optional[int] = None) -> Callable[[], None]: ...\n")),(0,s.kt)("p",null,"Changes a block number until the returned function is called. If ",(0,s.kt)("inlineCode",{parentName:"p"},"target_contract_address")," is specified, ",(0,s.kt)("inlineCode",{parentName:"p"},"roll")," affects only the contract with the specified address. Otherwise, ",(0,s.kt)("inlineCode",{parentName:"p"},"roll")," affects the current contract."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-cairo",metastring:'title="Roll cheatcode changes the value returned by get_block_number"',title:'"Roll',cheatcode:!0,changes:!0,the:!0,value:!0,returned:!0,by:!0,'get_block_number"':!0},"%lang starknet\nfrom starkware.starknet.common.syscalls import get_block_number\n\n@external\nfunc test_changing_block_number{syscall_ptr : felt*}():\n    %{ stop_roll = roll(123) %}\n    let (bn) = get_block_number()\n    assert bn = 123\n    %{ stop_roll() %}\n\n    let (bn2) = get_block_number()\n    %{ ids.bn2 != 123 %}\n\n    return ()\nend\n")),(0,s.kt)("h3",{id:"warp"},(0,s.kt)("inlineCode",{parentName:"h3"},"warp")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-python"},"def warp(blk_timestamp: int, target_contract_address: Optional[int] = None) -> Callable[[], None]: ...\n")),(0,s.kt)("p",null,"Changes a block timestamp until the returned function is called. If ",(0,s.kt)("inlineCode",{parentName:"p"},"target_contract_address")," is specified, ",(0,s.kt)("inlineCode",{parentName:"p"},"warp")," affects only the contract with the specified address. Otherwise, ",(0,s.kt)("inlineCode",{parentName:"p"},"warp")," affects the current contract."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-cairo",metastring:'title="Warp cheatcode changes the value returned by get_block_timestamp"',title:'"Warp',cheatcode:!0,changes:!0,the:!0,value:!0,returned:!0,by:!0,'get_block_timestamp"':!0},"%lang starknet\n\nfrom starkware.starknet.common.syscalls import get_block_timestamp\n\n@external\nfunc test_changing_timestamp{syscall_ptr : felt*}():\n    %{ stop_warp = warp(321) %}\n    let (bt) = get_block_timestamp()\n    assert bt = 321\n\n    %{ stop_warp() %}\n    let (bt2) = get_block_timestamp()\n    %{ assert ids.bt2 != 321 %}\n    return ()\nend\n")),(0,s.kt)("h3",{id:"store"},(0,s.kt)("inlineCode",{parentName:"h3"},"store")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-python"},"def store(target_contract_address: int, variable_name: str, value: List[int], key: Optional[List[int]] = None):\n")),(0,s.kt)("p",null,"Updates storage variable with name ",(0,s.kt)("inlineCode",{parentName:"p"},"variable_name")," and given key to ",(0,s.kt)("inlineCode",{parentName:"p"},"value")," of a contract with ",(0,s.kt)("inlineCode",{parentName:"p"},"target_contract_address"),".\nExample:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-cairo",metastring:'title="./src/contract.cairo"',title:'"./src/contract.cairo"'},"%lang starknet\n\nfrom starkware.cairo.common.cairo_builtins import HashBuiltin\nfrom starkware.starknet.common.syscalls import get_block_number\n\nstruct Value:\n    member a : felt\n    member b : felt\nend\n\n@storage_var\nfunc store_val(a: felt, b: felt) -> (res: Value):\nend\n\n@view\nfunc get_value{syscall_ptr : felt*, pedersen_ptr : HashBuiltin*, range_check_ptr}(a: felt, b: felt) -> (\n        res : Value):\n    let (val) = store_val.read(a, b)\n    return (val)\nend\n\n\n")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-cairo",metastring:'title="./test/test_store.cairo"',title:'"./test/test_store.cairo"'},'%lang starknet\nfrom starkware.cairo.common.cairo_builtins import HashBuiltin\nfrom src.contract import Value\n\n\n@contract_interface\nnamespace Contract:\n    func get_value(a: felt, b: felt) -> (res : Value):\n    end\nend\n\n@external\nfunc test_store{syscall_ptr : felt*, pedersen_ptr : HashBuiltin*, range_check_ptr}():\n    alloc_locals\n    local contract_address\n\n    %{\n        ids.contract_address = deploy_contract("./src/contract.cairo").contract_address\n        store(ids.contract_address, "store_val", [4, 3], key=[1,2])\n    %}\n\n    let (bn) = Contract.get_value(contract_address, 1, 2)\n\n    assert 4 = bn.a\n    assert 3 = bn.b\n    return ()\nend\n\n')),(0,s.kt)("div",{className:"admonition admonition-warning alert alert--danger"},(0,s.kt)("div",{parentName:"div",className:"admonition-heading"},(0,s.kt)("h5",{parentName:"div"},(0,s.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,s.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,s.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M5.05.31c.81 2.17.41 3.38-.52 4.31C3.55 5.67 1.98 6.45.9 7.98c-1.45 2.05-1.7 6.53 3.53 7.7-2.2-1.16-2.67-4.52-.3-6.61-.61 2.03.53 3.33 1.94 2.86 1.39-.47 2.3.53 2.27 1.67-.02.78-.31 1.44-1.13 1.81 3.42-.59 4.78-3.42 4.78-5.56 0-2.84-2.53-3.22-1.25-5.61-1.52.13-2.03 1.13-1.89 2.75.09 1.08-1.02 1.8-1.86 1.33-.67-.41-.66-1.19-.06-1.78C8.18 5.31 8.68 2.45 5.05.32L5.03.3l.02.01z"}))),"warning")),(0,s.kt)("div",{parentName:"div",className:"admonition-content"},(0,s.kt)("p",{parentName:"div"},"You have to provide ",(0,s.kt)("inlineCode",{parentName:"p"},"value")," and ",(0,s.kt)("inlineCode",{parentName:"p"},"key")," as list of ints. In the future Data Transformer will be supported."))),(0,s.kt)("div",{className:"admonition admonition-warning alert alert--danger"},(0,s.kt)("div",{parentName:"div",className:"admonition-heading"},(0,s.kt)("h5",{parentName:"div"},(0,s.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,s.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,s.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M5.05.31c.81 2.17.41 3.38-.52 4.31C3.55 5.67 1.98 6.45.9 7.98c-1.45 2.05-1.7 6.53 3.53 7.7-2.2-1.16-2.67-4.52-.3-6.61-.61 2.03.53 3.33 1.94 2.86 1.39-.47 2.3.53 2.27 1.67-.02.78-.31 1.44-1.13 1.81 3.42-.59 4.78-3.42 4.78-5.56 0-2.84-2.53-3.22-1.25-5.61-1.52.13-2.03 1.13-1.89 2.75.09 1.08-1.02 1.8-1.86 1.33-.67-.41-.66-1.19-.06-1.78C8.18 5.31 8.68 2.45 5.05.32L5.03.3l.02.01z"}))),"warning")),(0,s.kt)("div",{parentName:"div",className:"admonition-content"},(0,s.kt)("p",{parentName:"div"},"There is no type checking for ",(0,s.kt)("inlineCode",{parentName:"p"},"variable_name"),", ",(0,s.kt)("inlineCode",{parentName:"p"},"value"),", ",(0,s.kt)("inlineCode",{parentName:"p"},"key"),", make sure you provided values correctly. "))),(0,s.kt)("div",{className:"admonition admonition-tip alert alert--success"},(0,s.kt)("div",{parentName:"div",className:"admonition-heading"},(0,s.kt)("h5",{parentName:"div"},(0,s.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,s.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,s.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"}))),"tip")),(0,s.kt)("div",{parentName:"div",className:"admonition-content"},(0,s.kt)("p",{parentName:"div"},(0,s.kt)("inlineCode",{parentName:"p"},"key")," is a list of arguments because cairo ",(0,s.kt)("inlineCode",{parentName:"p"},"@storage_var")," maps any number of felt arguments to any number of felt values"))),(0,s.kt)("h3",{id:"load"},(0,s.kt)("inlineCode",{parentName:"h3"},"load")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-python"},"def load(target_contract_address: int, variable_name: str, variable_type: List[int], key: Optional[List[int]] = None) -> List[int]:\n")),(0,s.kt)("p",null,"Loads storage variable with name ",(0,s.kt)("inlineCode",{parentName:"p"},"variable_name")," and given ",(0,s.kt)("inlineCode",{parentName:"p"},"key")," and ",(0,s.kt)("inlineCode",{parentName:"p"},"variable_type")," from a contract with ",(0,s.kt)("inlineCode",{parentName:"p"},"target_contract_address"),".\n",(0,s.kt)("inlineCode",{parentName:"p"},"variable_type")," is provided as a string representation of type name.\nExample:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-cairo",metastring:'title="./src/contract.cairo"',title:'"./src/contract.cairo"'},"%lang starknet\n\nfrom starkware.cairo.common.cairo_builtins import HashBuiltin\n\nstruct Value:\n    member a : felt\n    member b : felt\nend\n\n@storage_var\nfunc store_val(a: felt, b: felt) -> (res: Value):\nend\n\n@storage_var\nfunc store_felt() -> (res: felt):\nend\n")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-cairo",metastring:'title="./test/test_store.cairo"',title:'"./test/test_store.cairo"'},'%lang starknet\nfrom starkware.cairo.common.cairo_builtins import HashBuiltin\n\n\n@external\nfunc test_store{syscall_ptr : felt*, pedersen_ptr : HashBuiltin*, range_check_ptr}():\n    alloc_locals\n    local contract_address\n    %{\n        ids.contract_address = deploy_contract("./src/contract.cairo").contract_address\n        felt_val = load(ids.contract_address, "store_felt", "felt")\n        assert felt_val == [0]\n\n        value_val = load(ids.contract_address, "store_val", "Value", key=[1,2])\n        assert value_val == [0, 0]\n    %}\n    return ()\nend\n\n')),(0,s.kt)("div",{className:"admonition admonition-warning alert alert--danger"},(0,s.kt)("div",{parentName:"div",className:"admonition-heading"},(0,s.kt)("h5",{parentName:"div"},(0,s.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,s.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,s.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M5.05.31c.81 2.17.41 3.38-.52 4.31C3.55 5.67 1.98 6.45.9 7.98c-1.45 2.05-1.7 6.53 3.53 7.7-2.2-1.16-2.67-4.52-.3-6.61-.61 2.03.53 3.33 1.94 2.86 1.39-.47 2.3.53 2.27 1.67-.02.78-.31 1.44-1.13 1.81 3.42-.59 4.78-3.42 4.78-5.56 0-2.84-2.53-3.22-1.25-5.61-1.52.13-2.03 1.13-1.89 2.75.09 1.08-1.02 1.8-1.86 1.33-.67-.41-.66-1.19-.06-1.78C8.18 5.31 8.68 2.45 5.05.32L5.03.3l.02.01z"}))),"warning")),(0,s.kt)("div",{parentName:"div",className:"admonition-content"},(0,s.kt)("p",{parentName:"div"},"You have to provide ",(0,s.kt)("inlineCode",{parentName:"p"},"key")," as list of ints. In the future Data Transformer will be supported."))),(0,s.kt)("div",{className:"admonition admonition-warning alert alert--danger"},(0,s.kt)("div",{parentName:"div",className:"admonition-heading"},(0,s.kt)("h5",{parentName:"div"},(0,s.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,s.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,s.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M5.05.31c.81 2.17.41 3.38-.52 4.31C3.55 5.67 1.98 6.45.9 7.98c-1.45 2.05-1.7 6.53 3.53 7.7-2.2-1.16-2.67-4.52-.3-6.61-.61 2.03.53 3.33 1.94 2.86 1.39-.47 2.3.53 2.27 1.67-.02.78-.31 1.44-1.13 1.81 3.42-.59 4.78-3.42 4.78-5.56 0-2.84-2.53-3.22-1.25-5.61-1.52.13-2.03 1.13-1.89 2.75.09 1.08-1.02 1.8-1.86 1.33-.67-.41-.66-1.19-.06-1.78C8.18 5.31 8.68 2.45 5.05.32L5.03.3l.02.01z"}))),"warning")),(0,s.kt)("div",{parentName:"div",className:"admonition-content"},(0,s.kt)("p",{parentName:"div"},"There is no type checking for ",(0,s.kt)("inlineCode",{parentName:"p"},"variable_name"),", ",(0,s.kt)("inlineCode",{parentName:"p"},"key"),", ",(0,s.kt)("inlineCode",{parentName:"p"},"variable_type")," make sure you provided values correctly. "))),(0,s.kt)("div",{className:"admonition admonition-tip alert alert--success"},(0,s.kt)("div",{parentName:"div",className:"admonition-heading"},(0,s.kt)("h5",{parentName:"div"},(0,s.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,s.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,s.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"}))),"tip")),(0,s.kt)("div",{parentName:"div",className:"admonition-content"},(0,s.kt)("p",{parentName:"div"},(0,s.kt)("inlineCode",{parentName:"p"},"key")," is a list of arguments because cairo ",(0,s.kt)("inlineCode",{parentName:"p"},"@storage_var")," maps any number of felt arguments to any number of felt values"))),(0,s.kt)("h2",{id:"data-transformer"},"Data Transformer"),(0,s.kt)("h3",{id:"what-is-a-data-transformer"},"What is a Data Transformer"),(0,s.kt)("p",null,"Data Transformer converts inputs and outputs of Cairo functions to Python friendly representation. Cairo internally operates on a list of integers, which readability and maintenance becomes problematic for complex data structures. You can read more about: "),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("a",{parentName:"li",href:"https://starknetpy.readthedocs.io/en/latest/guide.html?highlight=Data%20transformer#data-transformation"},"Data Transformer in the Starknet.py's documentation"),"."),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("a",{parentName:"li",href:"https://www.cairo-lang.org/docs/hello_starknet/more_features.html#passing-tuples-and-structs-in-calldata"},"representing tuples and structs as a list of integers in the official documentation"))),(0,s.kt)("h3",{id:"using-data-transformer-in-cheatcodes"},"Using Data Transformer in cheatcodes"),(0,s.kt)("p",null,"Cheatcodes accept arguments representing input or output of a Cairo function as:"),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("inlineCode",{parentName:"li"},"List[int]")," \u2014 a list of integers"),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("inlineCode",{parentName:"li"},"Dict[DataTransformer.ArgumentName, DataTransformer.SupportedType]")," \u2014 Data Transformer friendly dictionary")),(0,s.kt)("h3",{id:"example"},"Example"),(0,s.kt)("p",null,"The following example demonstrate usage on the ",(0,s.kt)("a",{parentName:"p",href:"#deploy_contract"},(0,s.kt)("inlineCode",{parentName:"a"},"deploy_contract")),"."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-cairo",metastring:'title="./src/main.cairo"',title:'"./src/main.cairo"'},"%lang starknet\nfrom starkware.cairo.common.uint256 import Uint256\n\n@constructor\nfunc constructor(initial_balance : Uint256, contract_id : felt):\n    # ...\n    return ()\nend\n")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-python",metastring:'title="Passing constructor data as a dictionary"',title:'"Passing',constructor:!0,data:!0,as:!0,a:!0,'dictionary"':!0},'deploy_contract("./src/main.cairo", { "initial_balance": 42, "contract_id": 123 })\n')),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-python",metastring:'title="Passing constructor data as a list of integers"',title:'"Passing',constructor:!0,data:!0,as:!0,a:!0,list:!0,of:!0,'integers"':!0},'deploy_contract("./src/main.cairo", [42, 0, 123])\n')))}u.isMDXComponent=!0}}]);