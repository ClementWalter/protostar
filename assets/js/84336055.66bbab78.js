"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[883],{3905:function(e,t,n){n.d(t,{Zo:function(){return d},kt:function(){return m}});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function c(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?c(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):c(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},c=Object.keys(e);for(r=0;r<c.length;r++)n=c[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var c=Object.getOwnPropertySymbols(e);for(r=0;r<c.length;r++)n=c[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var s=r.createContext({}),i=function(e){var t=r.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},d=function(e){var t=i(e.components);return r.createElement(s.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},p=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,c=e.originalType,s=e.parentName,d=l(e,["components","mdxType","originalType","parentName"]),p=i(n),m=a,f=p["".concat(s,".").concat(m)]||p[m]||u[m]||c;return n?r.createElement(f,o(o({ref:t},d),{},{components:n})):r.createElement(f,o({ref:t},d))}));function m(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var c=n.length,o=new Array(c);o[0]=p;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l.mdxType="string"==typeof e?e:a,o[1]=l;for(var i=2;i<c;i++)o[i]=n[i];return r.createElement.apply(null,o)}return r.createElement.apply(null,n)}p.displayName="MDXCreateElement"},8489:function(e,t,n){n.r(t),n.d(t,{assets:function(){return d},contentTitle:function(){return s},default:function(){return m},frontMatter:function(){return l},metadata:function(){return i},toc:function(){return u}});var r=n(7462),a=n(3366),c=(n(7294),n(3905)),o=["components"],l={},s="mock_call",i={unversionedId:"tutorials/testing/cheatcodes/mock-call",id:"tutorials/testing/cheatcodes/mock-call",title:"mock_call",description:"Mocks all calls to function with the name fnname of a contract with an address contractaddress until the returned callable is called. Mocked call returns data provided in ret_data. Mock works globally, for all of the contracts, not only the testing contract.",source:"@site/docs/tutorials/07-testing/02-cheatcodes/mock-call.md",sourceDirName:"tutorials/07-testing/02-cheatcodes",slug:"/tutorials/testing/cheatcodes/mock-call",permalink:"/protostar/docs/tutorials/testing/cheatcodes/mock-call",editUrl:"https://github.com/software-mansion/protostar/tree/master/website/docs/tutorials/07-testing/02-cheatcodes/mock-call.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorials",previous:{title:"max_examples",permalink:"/protostar/docs/tutorials/testing/cheatcodes/max-examples"},next:{title:"prepare",permalink:"/protostar/docs/tutorials/testing/cheatcodes/prepare"}},d={},u=[{value:"Representing different data structures in <code>ret_data</code>",id:"representing-different-data-structures-in-ret_data",level:2},{value:"Felt",id:"felt",level:3},{value:"Array",id:"array",level:3},{value:"Struct",id:"struct",level:3}],p={toc:u};function m(e){var t=e.components,n=(0,a.Z)(e,o);return(0,c.kt)("wrapper",(0,r.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,c.kt)("h1",{id:"mock_call"},(0,c.kt)("inlineCode",{parentName:"h1"},"mock_call")),(0,c.kt)("pre",null,(0,c.kt)("code",{parentName:"pre",className:"language-python"},"def mock_call(contract_address: int, fn_name: str, ret_data: Union[List[int], Dict]) -> Callable: ...\n")),(0,c.kt)("p",null,"Mocks all calls to function with the name ",(0,c.kt)("inlineCode",{parentName:"p"},"fn_name")," of a contract with an address ",(0,c.kt)("inlineCode",{parentName:"p"},"contract_address")," until the returned callable is called. Mocked call returns data provided in ",(0,c.kt)("inlineCode",{parentName:"p"},"ret_data"),". Mock works globally, for all of the contracts, not only the testing contract."),(0,c.kt)("div",{className:"admonition admonition-tip alert alert--success"},(0,c.kt)("div",{parentName:"div",className:"admonition-heading"},(0,c.kt)("h5",{parentName:"div"},(0,c.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,c.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,c.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"}))),"tip")),(0,c.kt)("div",{parentName:"div",className:"admonition-content"},(0,c.kt)("p",{parentName:"div"},"You can provide constructor arguments as a dictionary to leverage ",(0,c.kt)("a",{parentName:"p",href:"/protostar/docs/tutorials/testing/cheatcodes/#data-transformer"},"data transformer"),"."))),(0,c.kt)("h2",{id:"representing-different-data-structures-in-ret_data"},"Representing different data structures in ",(0,c.kt)("inlineCode",{parentName:"h2"},"ret_data")),(0,c.kt)("p",null,"To use ",(0,c.kt)("inlineCode",{parentName:"p"},"mock_call")," effectively, you need to understand how Cairo data structures are represented under the hood. ",(0,c.kt)("inlineCode",{parentName:"p"},"Cairo-lang")," operates on a list of integers. The following examples demonstrate how each data structure is represented in Python code."),(0,c.kt)("h3",{id:"felt"},"Felt"),(0,c.kt)("pre",null,(0,c.kt)("code",{parentName:"pre",className:"language-cairo",metastring:'title="mocked_call returns a felt"',title:'"mocked_call',returns:!0,a:!0,'felt"':!0},'%lang starknet\n\n@contract_interface\nnamespace ITestContract:\n    func get_felt() -> (res : felt):\n    end\nend\n\nconst EXTERNAL_CONTRACT_ADDRESS = 0x3fe90a1958bb8468fb1b62970747d8a00c435ef96cda708ae8de3d07f1bb56b\n\n@external\nfunc test_mock_call_returning_felt{syscall_ptr : felt*, range_check_ptr}():\n  tempvar external_contract_address = EXTERNAL_CONTRACT_ADDRESS\n\n  %{ stop_mock = mock_call(ids.external_contract_address, "get_felt", [42]) %}\n  let (res) = ITestContract.get_felt(EXTERNAL_CONTRACT_ADDRESS)\n  %{ stop_mock() %}\n\n  assert res = 42\n  return ()\nend\n')),(0,c.kt)("h3",{id:"array"},"Array"),(0,c.kt)("p",null,"To mock a function returning an array, provide data in the following format to ",(0,c.kt)("inlineCode",{parentName:"p"},"ret_data"),":"),(0,c.kt)("pre",null,(0,c.kt)("code",{parentName:"pre",className:"language-python",metastring:'title="Python representation of a Cairo array"',title:'"Python',representation:!0,of:!0,a:!0,Cairo:!0,'array"':!0},"[n, value_1, value_2, ..., value_n]\n")),(0,c.kt)("pre",null,(0,c.kt)("code",{parentName:"pre",className:"language-cairo",metastring:'title="mocked_call returns an array"',title:'"mocked_call',returns:!0,an:!0,'array"':!0},'%lang starknet\n\n@contract_interface\nnamespace ITestContract:\n    func get_array() -> (res_len : felt, res : felt*):\n    end\nend\n\nconst EXTERNAL_CONTRACT_ADDRESS = 0x3fe90a1958bb8468fb1b62970747d8a00c435ef96cda708ae8de3d07f1bb56b\n\n@external\nfunc test_mock_call_returning_array{syscall_ptr : felt*, range_check_ptr}():\n  tempvar external_contract_address = EXTERNAL_CONTRACT_ADDRESS\n\n  %{ stop_mock = mock_call(ids.external_contract_address, "get_array", [1, 42]) %}\n  let (res_len, res_arr) = ITestContract.get_array(EXTERNAL_CONTRACT_ADDRESS)\n  %{ stop_mock() %}\n\n  assert res_arr[0] = 42\n  return ()\nend\n')),(0,c.kt)("h3",{id:"struct"},"Struct"),(0,c.kt)("pre",null,(0,c.kt)("code",{parentName:"pre",className:"language-cairo",metastring:'title="mocked_call returns a struct"',title:'"mocked_call',returns:!0,a:!0,'struct"':!0},'%lang starknet\n\nstruct Point:\n    member x : felt\n    member y : felt\nend\n\n@contract_interface\nnamespace ITestContract:\n    func get_struct() -> (res : Point):\n    end\nend\n\nconst EXTERNAL_CONTRACT_ADDRESS = 0x3fe90a1958bb8468fb1b62970747d8a00c435ef96cda708ae8de3d07f1bb56b\n\n@external\nfunc test_mock_call_returning_struct{syscall_ptr : felt*, range_check_ptr}():\n  tempvar external_contract_address = EXTERNAL_CONTRACT_ADDRESS\n\n  %{ stop_mock = mock_call(ids.external_contract_address, "get_struct", [21,37]) %}\n  let (res_struct) = ITestContract.get_struct(EXTERNAL_CONTRACT_ADDRESS)\n  %{ stop_mock() %}\n\n  assert res_struct.x = 21\n  assert res_struct.y = 37\n  return ()\nend\n')))}m.isMDXComponent=!0}}]);